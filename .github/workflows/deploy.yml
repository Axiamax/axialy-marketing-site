name: Provision & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  NAMESILO_DOMAIN: axialy.ai
  TF_VERSION: 1.6.6
  DO_REGION: nyc3

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    outputs:
      droplet_ip: ${{ steps.output_ip.outputs.droplet_ip }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color \
          -var "do_token=${{ secrets.DO_TOKEN }}" \
          -var "ssh_key_name=${{ secrets.SSH_KEY_NAME }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve \
          -var "do_token=${{ secrets.DO_TOKEN }}" \
          -var "ssh_key_name=${{ secrets.SSH_KEY_NAME }}"

      - name: Capture Droplet IP
        id: output_ip
        run: echo "droplet_ip=$(terraform output -raw droplet_ip)" >> "$GITHUB_OUTPUT"

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Wait for SSH
        run: |
          ip=${{ needs.terraform.outputs.droplet_ip }}
          echo "Waiting for $ip to be reachable..."
          for i in {1..24}; do
            if ssh -o StrictHostKeyChecking=no -i <(echo "${{ secrets.SSH_PRIVATE_KEY }}") root@$ip 'echo ok' &>/dev/null; then
              echo "Droplet ready."
              exit 0
            fi
            sleep 10
          done
          echo "Timed out waiting for droplet." && exit 1

      - name: Deploy site over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.terraform.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -eu
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -qq
            apt-get install -qq nginx git rsync

            if [ ! -d /var/www/axialy ]; then
              git clone --depth 1 https://github.com/${{ github.repository }} /var/www/axialy
            else
              cd /var/www/axialy && git pull
            fi
            rsync -a --delete /var/www/axialy/axialy.ai/ /var/www/html/
            systemctl restart nginx

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install DNS dependencies
        run: pip install requests xmltodict

      - name: Sync DNS A record
        run: |
          python scripts/update-dns.py \
            --api-key "${{ secrets.NAMESILO_API_KEY }}" \
            --domain "${{ env.NAMESILO_DOMAIN }}" \
            --ip "${{ needs.terraform.outputs.droplet_ip }}"
